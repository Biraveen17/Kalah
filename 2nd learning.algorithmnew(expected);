By creating a random generator that generates a number randomly with the limits set to be the available moves so within the houses that contain atleast one seed. This makes sure that the player does not pick an invalid move(//more details) . I set the chosen house for each player to be random so nearly every time the game finishes a unique sequence of states are stored with different utility values(create a KEY utility value). These states are created by cloning the original array of the board with 14 index's into a temporary array but the temporary array has two extra index's 15 and 16 and this is because at the index 15 of the temporary array the utility value is stored and at index 16 the house chosen is stored which caused the previous state to turn into the current state. The purpose of storing the utility value at index 15 is because when the agent is playing as player 1 in the game and when it compares the current state of the game it is currently playing to the the game states stored in the data and more than one similar state is found the agent would not know which of the similar states to choose. By having an utility value in the array the the agent can compare the utility values of all the similar states and pick the state with the highest utility value containing state. After every complete move the state is cloned into a temporary array and this array is added ro an arraylist<Integer[]> and the reason for using and arraylist to store the array of int is because we dont know how long the arraylist will because it ultimately depends on how many times the game has a complete move. The ArrayList just allows int[] to be added onto the end of the ArrayList with no limits.
	Each ArrayList<Integer[]> contains the sequence of states for one game only so by running the game for 1000 times, 1000 arraylists containing int of array will be created and these will be stored in another ArrayList<ArrayList<Integer[]>> . All of these values are stored in the database class. 
